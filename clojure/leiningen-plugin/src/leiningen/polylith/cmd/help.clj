(ns leiningen.polylith.cmd.help
  (:require [leiningen.polylith.version :as v]
            [leiningen.polylith.cmd.help.build :as build]
            [leiningen.polylith.cmd.help.changes :as changes]
            [leiningen.polylith.cmd.help.create :as create]
            [leiningen.polylith.cmd.help.delete :as delete]
            [leiningen.polylith.cmd.help.deps :as deps]
            [leiningen.polylith.cmd.help.diff :as diff]
            [leiningen.polylith.cmd.help.info :as info]
            [leiningen.polylith.cmd.help.settings :as settings]
            [leiningen.polylith.cmd.help.test :as test-cmd]))

(defn help [sha1 sha2]
  (println (str "Polylith " v/version " (" v/date ") - https://github.com/tengstrand/polylith"))
  (println)
  (println "  lein polylith cmd [args]  - where cmd [args] are:")
  (println)
  (println "    changes x s1 s2      List changed components, bases or systems between two Git hashes")
  (println "    create x n [ns [d]]  Creates component or workspace 'n'")
  (println "    delete c n           Deletes component 'n'")
  (println "    deps                 List all dependencies")
  (println "    diff s1 s2           List all changes between two Git hashes")
  (println "    info [x] [s1 s2]     List interfaces, components, bases and systems")
  (println "    settings             The polylith settings in current project.clj")
  (println "    test x [s1 s2]       Execute or show tests")
  (println)
  (println "  lein polylith [help]        Show this help")
  (println "  lein polylith help cmd      Show help for a specific command")
  (println "  lein polylith help project  Show valid project.clj settings")
  (println)
  (println "  Examples:")
  (println "    lein polylith build" sha1 sha2)
  (println "    lein polylith changes c" sha1 sha2)
  (println "    lein polylith create c mycomponent")
  (println "    lein polylith create w myworkspace com.my.company")
  (println "    lein polylith delete c mycomponent")
  (println "    lein polylith deps")
  (println "    lein polylith deps f")
  (println "    lein polylith diff" sha1 sha2)
  (println "    lein polylith help info")
  (println "    lein polylith info")
  (println "    lein polylith info a")
  (println "    lein polylith info" sha1 sha2)
  (println "    lein polylith info a" sha1 sha2)
  (println "    lein polylith info c" sha1 sha2)
  (println "    lein polylith settings")
  (println "    lein polylith test")
  (println "    lein polylith test -")
  (println "    lein polylith test +" sha1 sha2))

(defn project []
  (println "  These are the valid settings of the :polylith section in the developments")
  (println "  project.clj file (the main development project if having more than one):")
  (println)
  (println "    :vcs x                     \"git\" is the only valid value of x for the moment.")
  (println)
  (println "    :build-tool x              \"leiningen\" is the only valid value of x for the moment.")
  (println)
  (println "    :top-ns x                  x is the name of the top namespace. This ns is added")
  (println "                               to the interfaces project.clj and each component project.clj")
  (println "                               file (to add the correct Maven artifact namespace).")
  (println)
  (println "    :top-dir x                 x is the directory path of the top namespace. If empty")
  (println "                               then each component name will be the top namespace.")
  (println "                               Do not put a '/' at the end of the path.")
  (println)
  (println "    :ignored-tests x           x is a vector of component and base tests that should be ignored.")
  (println)
  (println "    :clojure-version x         x is the version of clojure used when creating components.")
  (println)
  (println "    :clojure-spec-version x    x is the version of clojure spec used when creating components.")
  (println "                               The value could either be only the version number. In that case")
  (println "                               the library will be 'org.clojure/spec' or it could be both the")
  (println "                               library and the version separated by a space.")
  (println)
  (println "    :example-hash1 x           x is 'previous (successful) build SHA1' used in the examples.")
  (println "    :example-hash2 x           x is 'current build SHA1' used in the examples.")
  (println)
  (println "  Example of :ignored-tests:")
  (println "    [\"comp*\"] = ignore all 'comp' tests including all underlying namespaces")
  (println "    [\"comp.x*\"] = ignore all 'comp.x' tests including all underlying namespaces")
  (println "    [\"comp.x\" \"sys.y\"] = ignore all 'comp.x' and 'sys.y' tests")
  (println)
  (println "  Example of project.clj:")
  (println "    (defproject ...")
  (println "      ...")
  (println "      :polylith {:vcs \"git\"")
  (println "                 :build-tool \"leiningen\"")
  (println "                 :top-ns \"com.mycompany\"")
  (println "                 :top-dir \"com/mycompany\"")
  (println "                 :ignored-tests [\"migration*\" \"backend.mock\"]")
  (println "                 :clojure-version \"1.9.0\"")
  (println "                 :clojure-spec-version \"org.clojure/spec.alpha 0.1.143\"")
  (println "                 :exmple-sha1 \"2c851f3c6e7a5114cecf6bdd6e1c8c8aec8b32c1\"")
  (println "                 :exmple-sha2 \"58cd8b3106c942f372a40616fe9155c9d2efd122\"}")
  (println "      ...")
  (println "    )"))

(defn execute [sha1 sha2 [cmd]]
  (condp = cmd
    "build" (build/help sha1 sha2)
    "changes" (changes/help sha1 sha2)
    "create" (create/help)
    "delete" (delete/help)
    "deps" (deps/help)
    "diff" (diff/help sha1 sha2)
    "info" (info/help sha1 sha2)
    "project" (project)
    "settings" (settings/help)
    "test" (test-cmd/help sha1 sha2)
    (help sha1 sha2)))
